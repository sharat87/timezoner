const DEFAULT_ZONES=["Asia/Kolkata","America/New_York","Europe/Amsterdam"],zonesEl=document.getElementById("zones"),settingsFormEl=document.forms.settingsForm;function roundedTo15(e){if(e instanceof moment){const t=e.second(0).minute()%15;return t>=8&&e.add(15,"m"),e.subtract(t,"m")}{const t=(e=Math.round(parseFloat(e)))%15;return t>=8&&(e+=15),e-t}}function getMomentInZoneBox(e){return moment.tz([e.year.value,e.month.value,e.date.value,e.hour.value,e.minute.value,e.meridian.value].join(" "),"YYYY MM DD hh mm A",e.dataset.zone)}function setMomentInZoneBox(e,t,n){const[s,o,i,a,r,l,u,c]=t.format("YYYY MM DD hh mm A zz ZZ").split(" ");n&&n.includes(e.year)||(e.year.value=s),n&&n.includes(e.month)||(e.month.value=o),n&&n.includes(e.date)||(e.date.value=i),n&&n.includes(e.hour)||(e.hour.value=a),n&&n.includes(e.minute)||(e.minute.value=r),n&&n.includes(e.meridian)||(e.meridian.value=l),e.querySelector(".tz-abbr").innerHTML=u==e.dataset.zone?"":u+" = UTC"+c}function saveZones(){const e=[];for(const t of zonesEl.children)e.push(t.dataset.zone);localStorage.setItem("zones",JSON.stringify(e.slice(1)))}function loadZones(){const e=localStorage.getItem("zones");if(!e)return DEFAULT_ZONES;const t=JSON.parse(e);return t&&0!==t.length?t:DEFAULT_ZONES}function loadAllTimeZones(){const e=moment.tz.names();for(let t=e.length;t-- >0;)e[t]='<option value="'+e[t]+'">';document.getElementById("zoneNames").innerHTML=e.join("")}let h;function main(){h=hyperapp.h;const{app:e}=hyperapp;function t(e){return""!==e.inputValue?{...e,cities:[...e.cities,e.inputValue],inputValue:""}:e}window.ha=e({init:[{currentUtc:null,cities:["Mumbai","London","New York","Sydney"],zonesByCity:new Map,timesByZone:new Map,inputValue:""},[loadCities]],node:document.getElementById("app"),view:e=>h("div",{},[h("h1",{},"~ Timezoner ~ "),h("section",{},[h("div",{},zoneDisplayForCity(e)),h("input",{value:e.inputValue,onkeydown:(e,n)=>"Enter"===n.key?t(e):e,oninput:(e,t)=>({...e,inputValue:t.target.value})}),h("button",{onclick:t},"add")])])})}function loadCities(e){fetch("cities5000.txt").then(e=>e.text()).then(t=>{const n=new Map,s=t.split("\n").slice(2);for(const e of s)if(e){const[t,s,o]=e.split("\t");n.set(t,{name:t,asciiName:s,timezone:o,lowerName:s.toLowerCase()})}e(e=>({...e,zonesByCity:n}))})}function zoneDisplayForCity(e){return e.cities.map(t=>{const n=e.zonesByCity.get(t);if(!n)return"";const s=e.timesByZone.get(n.timezones);return h("form",{class:"zone","data-zone":n.timezone},[h("div",{class:"name"},t)," - ",n?n.timezone:"No zone"," - ",h("input",{class:"num",required:!0,name:"year",value:s.year}),"-",h("input",{class:"num",required:!0,name:"month",value:s.month}),"-",h("input",{class:"num",required:!0,name:"date",value:s.date}),"  ",h("input",{class:"num",required:!0,name:"hour",value:s.hour}),":",h("input",{class:"num",required:!0,name:"minute",value:s.minute})," ",h("input",{class:"num",required:!0,name:"meridian",value:s.meridian})])})}window.addEventListener("load",()=>{let e=roundedTo15(moment.utc()),t=0;const n=e.clone();zonesEl.addEventListener("input",o),zonesEl.addEventListener("click",(function(e){const t=e.target.closest(".dot");t&&(t.closest(".zone").remove(),saveZones())})),zonesEl.addEventListener("keydown",(function(e){if(["ArrowUp","ArrowDown"].includes(e.key)&&e.target.classList.contains("num"))e.preventDefault(),r(e.target,"ArrowUp"===e.key?1:-1);else if(["ArrowLeft","ArrowRight"].includes(e.key)&&e.target.classList.contains("num")){const t=e.target.selectionStart;if(0===t&&"ArrowLeft"===e.key){let t=e.target.previousElementSibling;for(;!t.matches("input.num");){if(!t.previousElementSibling)return;t=t.previousElementSibling}t.focus(),t.selectionStart=t.value.length,e.preventDefault()}else if(t===e.target.value.length&&"ArrowRight"===e.key){let t=e.target.nextElementSibling;for(;!t.matches("input.num");){if(!t.nextElementSibling)return;t=t.nextElementSibling}t.focus(),t.selectionEnd=0,e.preventDefault()}}})),zonesEl.addEventListener("wheel",(function(e){e.target.classList.contains("num")&&(e.preventDefault(),r(e.target,-Math.sign(e.deltaY)))})),document.forms.addZoneForm.addEventListener("submit",(function(e){e.preventDefault();const t=e.target.querySelector("input"),n=t.value;null===moment.tz.zone(n)?t.classList.add("error"):(t.classList.remove("error"),t.value="",s(n),saveZones())})),settingsFormEl.addEventListener("input",l),s("UTC");for(const e of loadZones())s(e);function s(e){const t=moment.tz.guess()===e?"local":"";let n="",s=e;e.includes("/")&&([n,s]=e.split("/",2)),s=s.replace(/_/g," "),zonesEl.insertAdjacentHTML("beforeEnd",`\n\t\t\t<form class="zone ${t}" data-zone="${e}">\n\t\t\t\t<svg class="dot">\n\t\t\t\t\t<g>\n\t\t\t\t\t\t<circle r="45%" cx="50%" cy="50%" stroke-width="0"/>\n\t\t\t\t\t\t<line x1="25%" y1="50%" x2="75%" y2="50%" stroke-width="2" stroke="white" display="none"/>\n\t\t\t\t\t</g>\n\t\t\t\t</svg>\n\t\t\t\t<div class=name>\n\t\t\t\t\t<span><span class=continent>${n}</span><span class=city>${s}</span></span>\n\t\t\t\t\t<span class=tz-abbr></span>\n\t\t\t\t</div>\n\t\t\t\t<input class="num" required name="year">\n\t\t\t\t<span class="sep">&ndash;</span>\n\t\t\t\t<input class="num" required name="month">\n\t\t\t\t<span class="sep">&ndash;</span>\n\t\t\t\t<input class="num" required name="date">\n\t\t\t\t<span class="sep">&middot;</span>\n\t\t\t\t<input class="num" required name="hour">\n\t\t\t\t<span class="sep">:</span>\n\t\t\t\t<input class="num" required name="minute">\n\t\t\t\t<span class="sep">&nbsp;</span>\n\t\t\t\t<input class="num" required name="meridian">\n\t\t\t</form>\n\t\t`.trim()),a(zonesEl.lastElementChild)}function o(s){let o;s instanceof Event?o=s.target:s instanceof Element&&(o=s,s=null);const a=getMomentInZoneBox(o.closest(".zone"));"range"===o.type?(t=o.value-a.utcOffset(),e=n.clone().add(t,"m")):(e=a.utc(),t=e.diff(n,"m")),i({exceptInputs:[o]})}function i(e){const{exceptZone:t,exceptInputs:n}=e||{};for(const e of zonesEl.children)e!==t&&a(e,n)}function a(n,s){const o=e.tz(n.dataset.zone);setMomentInZoneBox(n,o,s);const i=n.querySelector('input[type="range"]');!i||s&&s.includes(i)||(i.value=t+o.utcOffset())}function r(e,t){const n=e.closest(".zone"),s=getMomentInZoneBox(n);let i=e.name,a=1;"meridian"===i?[a,i]=[12,"h"]:"minute"===i?a=15:"date"===i&&(i="d"),s.add(t*a,i),setMomentInZoneBox(n,roundedTo15(s)),o(e)}function l(){settingsFormEl.hideSliders&&settingsFormEl.hideSliders.checked?document.body.classList.add("hide-sliders"):document.body.classList.remove("hide-sliders")}document.getElementById("loadingBox").remove(),i(),loadAllTimeZones(),l(),document.body.addEventListener("keydown",(function(e){if(!e.target.matches("input.zone-input"))return;if("ArrowUp"===e.key){const t=e.target.previousElementSibling.querySelector(".active");t.previousElementSibling&&(t.classList.remove("active"),t.previousElementSibling.classList.add("active"))}else if("ArrowDown"===e.key){const t=e.target.nextElementSibling.querySelector(".active");t.nextElementSibling&&(t.classList.remove("active"),t.nextElementSibling.classList.add("active"))}else if("Enter"===e.key){d(e.target.nextElementSibling.querySelector(".active"))}else setTimeout((function t(){const n=++m,s=e.target.value.toLowerCase();if(""===s)return;const o=[];setTimeout(t);const i=[];for(const e of u)if(e.lowerName.includes(s)&&(i.push(e),o.push(`<a href=# data-timezone="${e.timezone}" class="${o.length?"":"active"}">${e.name}</a>`)),n!==m)return void console.log("Cancel search",n);n===m&&(c=i,e.target.nextElementSibling.innerHTML=o.join(""))}))})),document.body.addEventListener("click",e=>{"#"===e.target.getAttribute("href")&&e.target.dataset.timezone&&(e.preventDefault(),d(e.target))});const u=[];let c=[],m=0;function d(e){s(e.dataset.timezone),saveZones()}fetch("cities5000.txt").then(e=>e.text()).then(e=>{const t=e.split("\n").slice(2);for(const e of t){if(!e)continue;const[t,n,s]=e.split("\t");u.push({name:t,asciiName:n,timezone:s,lowerName:n.toLowerCase()})}})}),window.onload=main;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,